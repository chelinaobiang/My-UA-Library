Author: Chelina Obiang & Genesis Benedith

Details for the Library UML Classes:


MyLibrary Class:
The MyLibrary class serves as the main interaction point for users who want to manage a collection of books. This class 
provides essential methods for adding books, sorting them, suggesting what to read next, and more. It integrates with 
the MyLibraryModel class, which handles the internal data and processing, as well as the Book class, representing 
individual book objects. By utilizing encapsulation, these classes work in tandem to restrict direct access to data, 
allowing for interaction solely through public methods. The constructor initializes an empty instance of MyLibraryModel 
to manage the book data.
Return: This method creates a new instance of the MyLibrary class, ensuring a fresh setup for managing books. It ties into the Book class by facilitating the creation of new Book objects that are passed to the model for data management. Only specific methods like addBook(), sortBooksByTitle(), and suggestRead() are available for user interaction, maintaining control over the core logic.

MyLibraryModel Class:
The MyLibraryModel class is responsible for managing the data related to the library's unread books. It serves as a data 
layer that stores, retrieves, and updates the book collection without exposing its internal structure to the MyLibrary 
class. This separation of data handling from user interaction allows MyLibraryModel to isolate the logic for storing 
books from how users interact with them. The constructor initializes a new list to hold the unread books and prepares 
the model for data management.

Return: This method creates a new instance of the MyLibraryModel class with an empty list of unread books. All interactions with the unread books list occur through well-defined methods like addBook() and getUnreadBooks(). This design hides the internal list structure, ensuring external classes (like MyLibrary) cannot directly access or modify it.

MyLibraryController Class:
The MyLibraryController class acts as the intermediary that manages the interaction between the user and the library 
system. It connects the MyLibrary class (responsible for user interactions) with the MyLibraryModel class (which manages 
the data). The controller ensures user commands are executed correctly by invoking the appropriate methods in MyLibraryModel 
to modify or retrieve data. The constructor initializes the controller with a reference to the libraryâ€™s model, allowing it 
to perform necessary data operations.

Model: This instance represents the MyLibraryModel that the controller manages.

Return: This method creates a new instance of MyLibraryController linked to a specific model, ensuring effective management of user commands and data interactions.

Book Class:
The Book class represents individual books within the library. It encapsulates information about each book's title, author, rating, and read status. This class is essential 
for creating new book entries that are subsequently managed by the MyLibraryModel class. The constructor initializes a Book object with the provided title and author, along 
with an initial rating of zero and a read status set to false.